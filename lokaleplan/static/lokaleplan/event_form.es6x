// vim:set ft=javascript sw=4 et:
function get_locations(el) {
    const options = [].slice.call(el.options);
    const locations = options.map(option => {
        const loc = {id: option.value, name: option.textContent,
                     _selected: option.selected,
                     get selected() { return loc.selected; },
                     set selected(b) { loc._selected = option.selected = b; }};
        return loc; });
    return locations;
}

function get_participant_form(participant_id) {
    const container = document.getElementById('p' + participant_id);
    const prefix = `id_p${participant_id}-`;
    const field_names = [
        'name', 'day', 'start_time', 'end_time', 'manual_time', 'locations'];
    const fields = {container: container};
    for (const field_name of field_names)
        fields[field_name] = document.getElementById(prefix + field_name);
    return fields;
}

function get_participants() {
    // Find the <select multiple> that lets us choose which participants
    // are part of this event.
    const el = document.getElementById('id_participants');
    // Map each option of the <select multiple> to a participant object.
    const options = [].slice.call(el.options);
    const participants = options.map((o) => {
        const f = get_participant_form(o.value);
        const p = {
            _name: f.name.value, get name() { return p._name; },
            set name(s) { p._name = f.name.value = s; },
            _day: f.day.value, get day() { return p._day; },
            set day(s) { p._day = f.day.value = s; },
            _start_time: f.start_time.value, get start_time() { return p._start_time; },
            set start_time(s) { p._start_time = f.start_time.value = s; },
            _end_time: f.end_time.value, get end_time() { return p._end_time; },
            set end_time(s) { p._end_time = f.end_time.value = s; },
            _manual_time: f.manual_time.value, get manual_time() { return p._manual_time; },
            set manual_time(s) { p._manual_time = f.manual_time.value = s; },
            _selected: o.selected, get selected() { return p._selected; },
            set selected(b) { p._selected = o.selected = b; },
            locations: get_locations(f['locations']),
            id: o.value, name: o.textContent,
        };
        return p;
    });
    return participants;
}

function set_participant_field(participant, key, value) {
    if (typeof(key) === typeof([]) && key[0] === 'locations')
        participant.locations[key[1]].selected = value;
    else if (key in participant) participant[key] = value;
    else throw 'Unknown key ' + key;
}

function get_participant_groups(participants) {
    const groups = {};
    for (const p of participants) {
        // Hack to support DATAM => DAT group
        const mo = /^([A-ZÆØÅ]+)(\d+|AM)$/.exec(p.name);
        if (mo) {
            const groupName = mo[1];
            if (!groups[groupName]) groups[groupName] = [];
            groups[groupName].push(p);
        }
    }
    const groupList = [];
    groupList.push({name: 'Alle', participants: participants});
    for (const k in groups)
        groupList.push({name: k, participants: groups[k]});
    return groupList;
}

function all(xs) {
    for (const x of xs) if (!x) return false;
    return true;
}

function any(xs, f=null) {
    for (const x of xs) if (f ? f(x) : x) return true;
    return false;
}

function hide(domelement) {
    if (domelement) domelement.style.display = 'none';
}

function hide_all(domelements) {
    for (const e of domelements) hide(e);
}

class ParticipantOption extends React.Component {
    render() {
        return <div>
            <input type='checkbox' checked={this.props.selected}
                onChange={e => this.props.onToggle(e.target.checked)} />
            <a href='javascript:void(0)' onClick={this.props.onClick}>
                {this.props.label}
            </a>
        </div>;
    }
}

class DaySelect extends React.Component {
    render() {
        return <select value={this.props.value} onChange={e => this.props.onChange(e.target.value) }>
            <option value={'3'}>Onsdag</option>
            <option value={'4'}>Torsdag</option>
            <option value={'5'}>Fredag</option>
        </select>
    }
}

class ParticipantLocations extends React.Component {
    render() {
        const options = this.props.names.map((name, i) => {
            const s = this.props.selected[i];
            return <div key={i}><label>
                <input type='checkbox' checked={s}
                    onChange={e => this.props.onChange(i, e.target.checked)} />
                <span>{name}</span>
            </label></div>});
        return <div className='locations'>
            {options}
        </div>
    }
}

class ParticipantUpdate extends React.Component {
    render() {
        const {value: activeParticipant, done: noActive} = this.props.participants.keys().next();
        if (noActive)
            return <div className='field event_form' ref='formDiv'></div>;
        return <div className='field event_form' ref='formDiv'>
                    <label ref='formLabel'>Data for {this.props.name}:</label>
                    <div>
                        <div className='field'>
                            <div className='event_form'>
    <div className="time">
        <div className="field">
            <label>Dag:</label>
            <DaySelect value={activeParticipant.day}
                onChange={v => this.props.onChange('day', v)} />
        </div>
        <div className="field">
            <label>Start:</label>
            <input value={activeParticipant.start_time}
                onChange={e => this.props.onChange('start_time', e.target.value)} />
        </div>
        <div className="field">
            <label>Slut:</label>
            <input value={activeParticipant.end_time}
                onChange={e => this.props.onChange('end_time', e.target.value)} />
        </div>
    </div>
    <div className="name">
        <div className="field">
            <label>Navn:</label>
            <input value={activeParticipant.name}
                onChange={e => this.props.onChange('name', e.target.value)} />
        </div>
    </div>
    <div>
        <div className="field">
            <label>Tid:</label>
            <input value={activeParticipant.manual_time}
                onChange={e => this.props.onChange('manual_time', e.target.value)} />
        </div>
    </div>
                            </div>
                        </div>
                    </div>
                    <div>
                        <div className='field'>
                            <label>Lokaler:</label>
                            <ParticipantLocations
                                names={activeParticipant.locations.map(l => l.name)}
                                selected={activeParticipant.locations.map((_, i) =>
                                    any(this.props.participants, p => p.locations[i].selected))}
                                onChange={(i, b) => this.props.onChange(['locations', i], b)} />
                        </div>
                    </div>
                </div>
    }
}

class EventForm extends React.Component {
    //static defaultProps = {
    //}
    //static propTypes = {
    //    participants: React.PropTypes.array.isRequired,
    //}
    state = {
        active: new Set(this.props.participants),
        activeName: 'Alle',
    }
    setParticipantsSelected(participants, selected) {
        for (const p of participants) p.selected = selected;
        this.forceUpdate();
    }

    render() {
        const participantList = [];
        for (const {name, participants} of get_participant_groups(this.props.participants))
            participantList.push(
                <ParticipantOption key={name} label={name}
                    selected={any(participants.map(p => p.selected))}
                    onToggle={b => this.setParticipantsSelected(participants, b)}
                    onClick={() => this.setState({active: new Set(participants), activeName: name})} />)
        for (const p of this.props.participants) {
            const locations = p.locations.filter(l => l.selected).map(l => l.name).join(', ');
            const label = (p.selected && locations) ? (p.name + ': ' + locations) : p.name;
            participantList.push(
                <ParticipantOption key={p.id} selected={p.selected} label={label}
                    onToggle={b => this.setParticipantsSelected([p], b)}
                    onClick={() => this.setState({active: new Set([p]), activeName: p.name})} />);
        }
        const rhs = <ParticipantUpdate name={this.state.activeName} participants={this.state.active}
            onChange={(k, v) => {
                this.state.active.forEach(
                    p => set_participant_field(p, k, v));
                if (this.state.activeName !== 'Alle')
                    this.setParticipantsSelected(this.state.active, true);
                this.forceUpdate();}} />
            ;
        return <div ref='container'>
                <div className='field' ref='participantList'>
                    {participantList}
                </div>
                {rhs}
            </div>;
    }
}

function init_react() {
    const participants = get_participants();
    console.log(participants);
    const formelement = participants[0].form.name.form;
    for (const p of participants) { hide(p.container); hide(p.form.locations); }
    hide(document.querySelector('.participants'));
    hide_all(document.querySelectorAll('.participant-name'));
    const event_form_div = document.createElement('div');
    event_form_div.className = 'event_form';
    formelement.insertBefore(event_form_div, formelement.firstChild);
    ReactDOM.render(<EventForm participants={participants} />, event_form_div);
}

window.addEventListener('load', init_react, false);
